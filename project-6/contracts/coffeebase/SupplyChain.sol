pragma solidity ^0.4.24;
// Define a contract 'Supplychain'

import '../coffeeaccesscontrol/FarmerRole.sol';
import '../coffeeaccesscontrol/RoasterRole.sol';
import '../coffeeaccesscontrol/CafeRole.sol';
import '../coffeeaccesscontrol/ConsumerRole.sol';



contract SupplyChain is FarmerRole, RoasterRole, CafeRole, ConsumerRole {

  // Define 'owner'
  address owner;

  // Define a variable called 'upc' for Universal Product Code (UPC)
  uint  upc;

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  uint  sku;

  // Define a public mapping 'items' that maps the UPC to an Item.
  mapping (uint => Item) items;

  // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash, 
  // that track its journey through the supply chain -- to be sent from DApp.
  mapping (uint => string[]) itemsHistory;
  
  // Define enum 'State' with the following values:
  enum State 
  { 
    Farmed,  // 0
    Processed,  // 1
    PurchasedByRoaster,     // 2
    Roasted,    // 3
    PurchasedByCafe,       // 4
    Ordered,    // 5
    Brewed,   // 6
    Consumed   // 7
    }

  State constant defaultState = State.Farmed;

  // Define a struct 'Item' with the following fields:
  struct Item {
    uint    sku;  // Stock Keeping Unit (SKU)
    uint    upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
    address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
    address originFarmerID; // Metamask-Ethereum address of the Farmer
    string  originFarmName; // Farmer Name
    string  productNotes; // Product Notes
    uint    productPrice; // Product Price
    State   itemState;  // Product State as represented in the enum above
    // uint256 harvestDate; // The Date of harvest
    uint256 roastDate; // The Date of roasted
    // uint256 consumeDate; // The Date of consumption
    address roasterID;  // Metamask-Ethereum address of the Roaster
    address cafeID; // Metamask-Ethereum address of the Cafe
    address consumerID; // Metamask-Ethereum address of the Consumer
    uint productID; // product ID
    string originFarmLong; // Farm Longitude
    string originFarmLat; // Farm Latitude
  }

  // Define 8 events with the same 8 state values and accept 'upc' as input argument
  event Farmed(uint upc);
  event Processed(uint upc);
  event PurchasedByRoaster(uint upc);
  event Roasted(uint upc);
  event PurchasedByCafe(uint upc);
  event Ordered(uint upc);
  event Brewed(uint upc);
  event Consumed(uint upc);

  // Define a modifer that checks to see if msg.sender == owner of the contract
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }

  // Define a modifer that verifies the Caller
  modifier verifyCaller (address _address) {
    require(msg.sender == _address); 
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) { 
    require(msg.value >= _price); 
    _;
  }
  
  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValue(uint _upc) {
    _;
    uint _price = items[_upc].productPrice;
    uint amountToReturn = msg.value - _price;
    items[_upc].consumerID.transfer(amountToReturn);
  }

  // Define a modifier that checks if an item.state of a upc is Farmed
  modifier farmed(uint _upc) {
    require(items[_upc].itemState == State.Farmed);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Processed
  modifier processed(uint _upc) {
    require(items[_upc].itemState == State.Processed);
    _;
  }
  
  // Define a modifier that checks if an item.state of a upc is Purchased by Roaster
  modifier purchasedByRoaster(uint _upc) {
    require(items[_upc].itemState == State.PurchasedByRoaster);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Roasted
  modifier roasted(uint _upc) {
    require(items[_upc].itemState == State.Roasted);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Purchased by Cafe
  modifier purchasedByCafe(uint _upc) {
    require(items[_upc].itemState == State.PurchasedByCafe);
    _;
  }
  
  // Define a modifier that checks if an item.state of a upc is Ordered
  modifier ordered(uint _upc) {
    require(items[_upc].itemState == State.Ordered);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Brewed
  modifier brewed(uint _upc) {
    require(items[_upc].itemState == State.Brewed);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Consumed
  modifier consumed(uint _upc) {
    require(items[_upc].itemState == State.Consumed);
    _;
  }

  // In the constructor set 'owner' to the address that instantiated the contract
  // and set 'sku' to 1
  // and set 'upc' to 1
  constructor() public payable {
    owner = msg.sender;
    sku = 1;
    upc = 1;
  }

  // Define a function 'kill' if required
  function kill() public {
    if (msg.sender == owner) {
      selfdestruct(owner);
    }
  }

  // Define a function 'farmItem' that allows a farmer to mark an item 'Farmed'
  function farmItem(uint _upc, string _originFarmName, string _originFarmLong, string _originFarmLat, string  _productNotes) public onlyFarmer
  {
    Item memory item;
    item.sku = sku;
    item.upc = _upc;
    item.ownerID = msg.sender;
    item.originFarmName = _originFarmName;
    item.originFarmerID = msg.sender;
    item.productNotes = _productNotes;
    item.itemState = State.Farmed;
    item.originFarmLat = _originFarmLat;
    item.originFarmLong = _originFarmLong;
    item.productID = _upc + sku;
    // Add the new item as part of Farm
    items[_upc] = item;
        
      
    
    // Emit the appropriate event
    emit Farmed(_upc);

    // Increment sku
    sku = sku + 1;
    
  }


  // Define a function 'processtItem' that allows a farmer to mark an item 'Processed'
  function processItem(uint _upc) public onlyFarmer farmed(_upc)
  // Call modifier to check if upc has passed previous supply chain stage
  
  // Call modifier to verify caller of this function
  
  {
    // Update the appropriate fields
    items[_upc].itemState = State.Processed;
    items[_upc].ownerID = msg.sender;
    // Emit the appropriate event
    emit Processed(_upc);
  }

  // Define a function 'packItem' that allows a Roaster to mark an item 'PurchasedByRoaster'
  function purchaseItemByRoaster(uint _upc) public onlyRoaster processed(_upc)
  // Call modifier to check if upc has passed previous supply chain stage
  
  // Call modifier to verify caller of this function
  
  {
    // Update the appropriate fields
    items[_upc].itemState = State.PurchasedByRoaster;
    items[_upc].roasterID = msg.sender;
    items[_upc].ownerID = msg.sender;
    // Emit the appropriate event
    emit PurchasedByRoaster(_upc);
    
  }

  // Define a function 'sellItem' that allows a farmer to mark an item 'ForSale'
  function roastItem(uint _upc) public onlyRoaster
  // Call modifier to check if upc has passed previous supply chain stage
  
  // Call modifier to verify caller of this function
  
  {
    // Update the appropriate fields
    items[_upc].itemState = State.Roasted;
    items[_upc].roastDate = now;
    items[_upc].ownerID = msg.sender;

    // Emit the appropriate event
    emit Roasted(_upc);
    
  }

  function purchaseItemByCafe(uint _upc, uint _price) public onlyCafe {
    // Update the appropriate fields
    items[_upc].itemState = State.PurchasedByCafe;
    items[_upc].productPrice = _price;
    items[_upc].cafeID = msg.sender;
    items[_upc].ownerID = msg.sender;


    // Emit the appropriate event
    emit PurchasedByCafe(_upc);
  }

  function orderItem(uint _upc) public onlyConsumer payable paidEnough(items[_upc].productPrice){
    // Update the appropriate fields
    items[_upc].itemState = State.Ordered;
    items[_upc].consumerID = msg.sender;
    items[_upc].ownerID = msg.sender;
    items[_upc].cafeID.transfer(msg.value);
    // Emit the appropriate event
    emit Ordered(_upc);
  }

  function brewItem(uint _upc) public onlyCafe{
    // Update the appropriate fields
    items[_upc].itemState = State.Brewed;
    items[_upc].ownerID = msg.sender;

    // Emit the appropriate event
    emit Brewed(_upc);
  }

  function drinkItem(uint _upc) public onlyConsumer {
    // Update the appropriate fields
    items[_upc].itemState = State.Consumed;
    items[_upc].ownerID = msg.sender;

    // Emit the appropriate event
    emit Consumed(_upc);
  }


  // Define a function 'fetchItemBufferOne' that fetches the data
  function fetchItemBufferOne(uint _upc) public view returns 
  (
  uint    itemSKU,
  uint    itemUPC,
  address ownerID,
  address originFarmerID,
  string  originFarmName,
  uint productID,
  string originFarmLong,
  string originFarmLat
  ) 
  {
  // Assign values to the 8 parameters
  
  itemSKU = items[_upc].sku;
  itemUPC = items[_upc].upc;
  ownerID = items[_upc].ownerID;
  originFarmerID = items[_upc].originFarmerID;
  originFarmName = items[_upc].originFarmName;
  productID = items[_upc].productID;
  originFarmLong = items[_upc].originFarmLong;
  originFarmLat = items[_upc].originFarmLat; 
  return 
  (
  itemSKU,
  itemUPC,
  ownerID,
  originFarmerID,
  originFarmName,
  productID,
  originFarmLong,
  originFarmLat
  );
  }


  // Define a function 'fetchItemBufferTwo' that fetches the data
  function fetchItemBufferTwo(uint _upc) public view returns 
  (
  uint    itemSKU,
  uint    itemUPC,
  uint    itemState,
  string  productNotes,
  uint    productPrice,
  uint256 roastDate,
  address roasterID,
  address cafeID,
  address consumerID
  ) 
  {
    // Assign values to the 9 parameters
  itemSKU = items[_upc].sku;
  itemUPC = items[_upc].upc;
  itemState = uint(items[_upc].itemState);
  productNotes = items[_upc].productNotes;
  productPrice = items[_upc].productPrice;
  roastDate = items[_upc].roastDate;
  roasterID = items[_upc].roasterID;
  cafeID = items[_upc].cafeID;
  consumerID = items[_upc].consumerID;
    
  return 
  (
  itemSKU,
  itemUPC,
  itemState,
  productNotes,
  productPrice,
  roastDate,
  roasterID,
  cafeID,
  consumerID
  );
  }
  

}
