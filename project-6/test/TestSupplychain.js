// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.toWei(0.0018, "ether")
    var itemState = 0
    const farmerID = accounts[1]
    const roasterID = accounts[2]
    const cafeID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'
    const truffleAssert = require('truffle-assertions')
    const originFarmLong = "32.5825"
    const originFarmLat = "0.3476"
    const productID = sku + upc

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[1] ", accounts[1])
    console.log("Roaster: accounts[2] ", accounts[2])
    console.log("Cafe: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])

    let supplyChain;

    before(async () => {
        supplyChain = await SupplyChain.deployed()
        // Add the actors to the supply chain
        await supplyChain.addFarmer(farmerID)
        await supplyChain.addRoaster(roasterID)
        await supplyChain.addCafe(cafeID)
        await supplyChain.addConsumer(consumerID)
    })

    // 1st Test
    it("Testing smart contract function farmItem() that allows a farmer to farm coffee", async() => {
        supplyChain = await SupplyChain.deployed()
        await truffleAssert.reverts(supplyChain.farmItem(upc, originFarmName, originFarmLong, originFarmLat, productNotes, {from: roasterID}), "revert");
        
        let result = await supplyChain.farmItem(upc, originFarmName, originFarmLong, originFarmLat, productNotes, {from: farmerID})
        assert.equal(result.logs[0].event, "Farmed")

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], farmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], farmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmerName')
        assert.equal(resultBufferTwo[2], 0, 'Error: Invalid item state')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Missing or Invalid Product Notes')
        assert.equal(resultBufferOne[5], productID, 'Error: Missing or Invalid Product ID')
        assert.equal(resultBufferOne[6], originFarmLong, 'Error: Missing or Invalid Farm Longitude')
        assert.equal(resultBufferOne[7], originFarmLat, 'Error: Missing or Invalid Farm Latitude')
        
        // assert.equal(eventEmitted, true, 'Invalid event emitted')    

    })    

    // 2nd Test
    it("Testing smart contract function processItem() that allows a farmer to process coffee", async() => {
        supplyChain = await SupplyChain.deployed()
        
        let result = await supplyChain.processItem(upc, {from: farmerID})
        assert.equal(result.logs[0].event, "Processed")

        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[2], farmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[2], 1, 'Error: Invalid item state')
    })    

    // 3rd Test
    it("Testing smart contract function PurchaseItemByRoaster() that allows a roaster to purchase coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        let result = await supplyChain.purchaseItemByRoaster(upc, {from: roasterID})
        assert.equal(result.logs[0].event, "PurchasedByRoaster")

        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[2], roasterID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[2], 2, 'Error: Invalid item state')
        assert.equal(resultBufferTwo[6], roasterID, 'Error: Invalid roaster ID')
        
    })    

    // 4th Test
    it("Testing smart contract function roastItem() that allows a roaster to roast coffee", async() => {
        const start = Math.floor(Date.now() / 1000)
        const supplyChain = await SupplyChain.deployed()
        
        let result = await supplyChain.roastItem(upc, {from: roasterID})
        assert.equal(result.logs[0].event, "Roasted")

        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)


        // Verify the result set
        assert.equal(resultBufferOne[2], roasterID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[2], 3, 'Error: Invalid item state')
        assert.equal(resultBufferTwo[5] * 1000 >= start, true, 'Error: Invalid roast timestamp')
    })    

    // 5th Test
    it("Testing smart contract function purchaseItemByCafe() that allows a cafe to buy coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        let result = await supplyChain.purchaseItemByCafe(upc, productPrice, {from: cafeID})
        assert.equal(result.logs[0].event, "PurchasedByCafe")

        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[2], cafeID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[2], 4, 'Error: Invalid item state')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid Product Price')
        assert.equal(resultBufferTwo[7], cafeID, 'Error: Invalid cafe ID')
    })    

    // 6th Test
    it("Testing smart contract function orderItem() that allows a consumer to order coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        await truffleAssert.reverts(supplyChain.orderItem(upc, {from: consumerID, value: web3.toWei(0.000001, "ether")}), "revert");


        let balanceOfConsumerBeforeTransaction = await web3.eth.getBalance(consumerID);
        let balanceOfCafeBeforeTransaction = await web3.eth.getBalance(cafeID);

        let result = await supplyChain.orderItem(upc, {from: consumerID, value: productPrice})
        assert.equal(result.logs[0].event, "Ordered")

        let balanceOfConsumerAfterTransaction = await web3.eth.getBalance(consumerID);
        let balanceOfCafeAfterTransaction = await web3.eth.getBalance(cafeID);

        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // let gasPrice = await web3.eth.getGasPrice()
        // console.log("gas used", result.receipt.gasUsed);
        // console.log("gasPrice", gasPrice);
        // let gas = BigInt(result.receipt.gasUsed * gasPrice)
        // Verify the result set
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[2], 5, 'Error: Invalid item state')
        assert.equal(Number(balanceOfConsumerBeforeTransaction) - Number(balanceOfConsumerAfterTransaction) - productPrice >= 0, true, 'Error: Wrong consumer balance after transaction');
        assert.equal(Number(balanceOfCafeAfterTransaction), Number(balanceOfCafeBeforeTransaction) + Number(productPrice), 'Error: Wrong cafe balance after transaction');
        assert.equal(resultBufferTwo[8], consumerID, 'Error: Invalid consumer ID')       
    })    

    // 7th Test
    it("Testing smart contract function brewItem() that allows a cafe to brew coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        let result = await supplyChain.brewItem(upc, {from: cafeID})
        assert.equal(result.logs[0].event, "Brewed")

        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[2], cafeID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[2], 6, 'Error: Invalid item state')
             
    })    

    // 8th Test
    it("Testing smart contract function drinkItem() that allows a consumer to drink coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        let result = await supplyChain.drinkItem(upc, {from: consumerID})
        assert.equal(result.logs[0].event, "Consumed")

        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[2], 7, 'Error: Invalid item state')
              
        
    })    

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        
        const buffer = await supplyChain.fetchItemBufferOne(upc)
        
        // Verify the result set:
        assert.equal(sku, buffer[0], 'Error: Invalid SKU')
        assert.equal(upc, buffer[1], 'Error: Invalid UPC')
        assert.equal(consumerID, buffer[2], 'Error: Invalid owner ID')
        assert.equal(originFarmerID, buffer[3], 'Error: Invalid origin farmer ID')
        assert.equal(originFarmName, buffer[4], 'Error: Invalid origin farmer name')
        assert.equal(productID, buffer[5], 'Error: Invalid origin product ID')
        assert.equal(originFarmLong, buffer[6], 'Error: Invalid origin farmer Longitude')
        assert.equal(originFarmLat, buffer[7], 'Error: Invalid origin farmer Latitude')
    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        
        const buffer = await supplyChain.fetchItemBufferTwo(upc)
        
        // Verify the result set:
        assert.equal(sku, buffer[0], 'Error: Invalid SKU')
        assert.equal(upc, buffer[1], 'Error: Invalid UPC')
        assert.equal(7, buffer[2], 'Error: Invalid item state')
        assert.equal(productNotes, buffer[3], 'Error: Invalid product notes')
        assert.equal(productPrice, buffer[4], 'Error: Invalid product price')
        assert.equal(roasterID, buffer[6], 'Error: Invalid roaster ID')
        assert.equal(cafeID, buffer[7], 'Error: Invalid cafe ID')
        assert.equal(consumerID, buffer[8], 'Error: Invalid consumer ID')
        
    })




});

